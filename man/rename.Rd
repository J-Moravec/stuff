% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rename.r
\name{rename}
\alias{rename}
\alias{frename}
\title{Rename object}
\usage{
rename(x, old, new, strict = TRUE)

frename(x, f, ...)
}
\arguments{
\item{x}{an object that is to be renamed, generally any object for which the generic \code{names()}
and \verb{names()<-} exist. This means that for \code{data.frame}, column names are modified.}

\item{old}{a character vector of names to be replaced with \code{new}}

\item{new}{a character vector of new names replacing \code{old}}

\item{strict}{a logical, if \code{FALSE} elements of \code{old} that do not have matching value in
\code{names(x)} are ignored. Otherwise, an error is signaled.}

\item{f}{a function with \code{names(x)} as its first unnamed argument (see examples)}

\item{...}{other arguments passed to \code{f}}
}
\description{
Rename object, such as columns of data.frame, using the \code{\link[base:names]{base::names()}} generics.
Two interfaces are provided: \code{rename()} to modify matching names and \code{frename()}
renaming is performed using user-provided function.
}
\details{
\code{rename()} will rename the names of \code{x} that match the \code{old} vector with \code{new} vector.
The \code{old} and \code{new} vectors must have the same length.

\code{frename()} will rename the names of \code{x} using the function \code{f} by applying the \code{f}
on the names of \code{x} and assigning the return value back to the names.
The function \code{f} assumes that the names of \code{x} are the first argument.

Compared to some other implementations, non-standard evaluation is not used.
This makes passsing old or new names with variables easier.
}
\examples{

rename(mtcars, "hp", "horsepower")
rename(mtcars, c("hp", "cyl"), c("horsepower", "cylinders"))
old = c("hp", "cyl"); new = c("horsepower", "cylinders")
rename(mtcars, old, new)

# These would throw error:
\dontrun{
rename(mtcars, "hp", c("horsepower", "cylinders")) # unequal length
rename(mtcars, "bp", "horsepower") # bp not in names(mtcars)
}

# with strict = FALSE: bp ignored here, hp still renamed
rename(mtcars, c("bp, "hp"),
       c("foo, "horsepower"), strict = FALSE)


# first argumnet passed to `f` is names(x)
frename(mtcars, f = paste0, "_foo")

# named arguments allow more precision
frename(mtcars, f = gsub, pattern = "[aeiou]", replacement = "_")

}
