% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/startsWith.r
\name{startsWith}
\alias{startsWith}
\alias{endsWith}
\title{Does string start or end with another string?}
\usage{
startsWith(x, prefix, value = FALSE)

endsWith(x, suffix, value = FALSE)
}
\arguments{
\item{x}{character vector whose starts or ends are considered}

\item{prefix, suffix}{character vector, typically a length of one}

\item{value}{a logical, if \code{TRUE}, vector containing the matching elements is returned}
}
\value{
If \code{value = FALSE} (default) a logical vector of common length of \code{x} and
\code{prefix/suffix}, i.e., both vectors are recycled to the longer of two lengths.
If \code{value = TRUE}, a character vector resulting from subsetting \code{x} with the logical
vector described above.
}
\description{
Determines if entries of \code{x} start or end with string (entries of)
\code{prefix} or \code{suffix} respecitvely, where strings are recycled to common length.
}
\details{
This is wrapper around \code{\link[base:startsWith]{base::startsWith()}} and \code{\link[base:startsWith]{base::endsWith()}} respectively
with additional argument \code{value}, setting this to \code{TRUE} will return the matching elements
instead the \code{TRUE/FALSE/NA} values, similar to \code{grep(..., value = TRUE)}, see examples.
}
\examples{
x = c("foo", "bar", "baz")

# like base::startsWith()
identical(
    startsWith(x, "b"),
    base::startsWith(x, "b")
    )

# return the matching value:
identical(
   startsWith(x, "b", TRUE),
   c("bar", "baz")
   )

# These are equivalent
startsWith(x, "b", TRUE)
x[base::startsWith(x, "b")]
grep("^b.*", x, value = TRUE)

# In data.frames, columns often have prefix/suffix
# and it is useful to get the names directly
startsWith(names(iris), "Sepal", TRUE)
endsWith(names(iris), "Width", TRUE)

}
\seealso{
\code{\link[base:startsWith]{base::startsWith()}} and \code{\link[base:startsWith]{base::endsWith()}} for the original implementation,
\code{\link[base:grep]{base::grep()}} and \code{\link[base:grep]{base::grepl()}} for regexp-based matching,
\code{\link[base:substr]{base::substring()}} for direct comparison of substrings,
\code{\link[base:charmatch]{base::charmatch()}} and \code{\link[base:pmatch]{base::pmatch()}} for partial string matching
}
